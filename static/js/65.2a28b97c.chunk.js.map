{"version":3,"file":"static/js/65.2a28b97c.chunk.js","mappings":"0MACA,EAAuC,qC,SCE1BA,EAAS,WACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAIjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAyBH,UAAEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BAC5CC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLC,SARiB,SAAAC,GACrBT,GAASU,EAAAA,EAAAA,GAAaD,EAAEE,OAAOC,OACjC,EAOMC,YAAY,qBAIpB,E,wCCjBaC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EACpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAG5CC,GAAgBC,EAAAA,EAAAA,IAC3B,CAACT,EAHyB,SAAAC,GAAK,OAAIA,EAAMS,MAAO,IAIhD,SAACR,EAAUQ,GACT,OAAOR,EAASQ,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,mBCXF,EAAqC,iCAArC,EAAuF,6BAAvF,EAA2I,mCAA3I,EAA4N,4BCK/ME,EAAe,WAC1B,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BJ,EAAIM,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBpC,GAAWC,EAAAA,EAAAA,MACXe,GAAWuB,EAAAA,EAAAA,IAAYzB,GACvB0B,EAAaxB,EAASyB,MAC1B,SAAAhB,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAAa,IAExDe,EAAe1B,EAASyB,MAAK,SAAAhB,GAAO,OAAIA,EAAQY,SAAWA,CAAM,IAajEM,EAAiB,SAAAlC,GACrB,IAAAmC,EAAwBnC,EAAEE,OAAlBe,EAAIkB,EAAJlB,KAAMd,EAAKgC,EAALhC,MAEd,OAAQc,GACN,IAAK,OACHQ,EAAQtB,GACR,MACF,IAAK,SACH,IAEMiC,EAFSjC,EAAMkC,QAAQ,MAAO,IACTC,MAAM,EAAG,IACHD,QAC/B,wBACA,YAEFR,EAAUO,GACV,MACF,QACE,OAEN,EAEA,OACE3C,EAAAA,EAAAA,MAAA,OAAKG,UAAWC,EAAuBH,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAmBH,SAAC,eACnCD,EAAAA,EAAAA,MAAA,QAAM8C,SApCa,SAAAvC,GAErB,OADAA,EAAEwC,iBACET,EACKU,IAAAA,QAAe,qBAADC,OAAsBzB,EAAI,iBACtCgB,EACFQ,IAAAA,QAAe,UAADC,OAAWd,EAAM,iBAExCrC,GAASoD,EAAAA,EAAAA,IAAmB,CAAE1B,KAAAA,EAAMW,OAAAA,KACpCH,EAAQ,SACRI,EAAU,IACZ,EA0BmCnC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAyBH,SAAC,UACzCC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLmB,KAAK,OACL2B,QAAQ,qGACRC,MAAM,2IACNC,UAAQ,EACR3C,MAAOc,EACPlB,SAAUmC,UAGhBvC,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAyBH,SAAC,YACzCC,EAAAA,EAAAA,KAAA,SACEG,KAAK,MACLmB,KAAK,SACL2B,QAAQ,6BACRC,MAAM,0DACNC,UAAQ,EACR3C,MAAOyB,EACP7B,SAAUmC,UAKhBvC,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAASF,UAAWC,EAAkBH,SAAC,yBAI5D,ECnFA,EAA8B,8BAA9B,EAA0E,8BCG7DqD,EAAc,SAAHC,GAAqB,IAAfhC,EAAOgC,EAAPhC,QACtBzB,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,MAAA,MAAIG,UAAWC,EAAgBH,SAAA,EAC7BD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAIsB,EAAQC,QACZtB,EAAAA,EAAAA,KAAA,KAAAD,SAAIsB,EAAQY,aAEhBjC,EAAAA,EAAAA,KAAA,UACEG,KAAK,SAASF,UAAWC,EAAiBoD,QAR3B,WAAH,OAAS1D,GAAS2D,EAAAA,EAAAA,IAAsBlC,EAAQmC,IAAK,EAQDzD,SAAC,qBAGzE,EChBA,EAA+B,kCAA/B,EAA0F,4CAA1F,EAA+J,4CCc/J,EAXqB,WACnB,IAAM0D,GAAmBtB,EAAAA,EAAAA,IAAYjB,GACrC,OACElB,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAiBH,SAC7B0D,EAAiBC,KAAI,SAAArC,GAAO,OAC3BrB,EAAAA,EAAAA,KAACoD,EAAW,CAAkB/B,QAASA,GAArBA,EAAQmC,GAAoC,KAItE,E,UCZaG,EAAS,WACpB,OAAO3D,EAAAA,EAAAA,KAAA,OAAK4D,MAAOC,EAAOC,UAAU/D,UACrCC,EAAAA,EAAAA,KAAC+D,EAAAA,GAAiB,CACjBC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,6BACVC,aAAc,CAAC,EACfC,aAAa,6BACbC,KAAO,IACPC,UAAY,YAId,EAEMV,EAAS,CACXC,UAAW,CACPU,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,IAAK,EACLC,KAAM,EACNV,MAAO,OACPD,OAAQ,SCMhB,EArBiB,WACf,IAAMlD,GAAYoB,EAAAA,EAAAA,IAAYrB,GACxBG,GAAQkB,EAAAA,EAAAA,IAAYnB,GAEpBpB,GAAWC,EAAAA,EAAAA,MAKjB,OAJAgF,EAAAA,EAAAA,YAAU,WACRjF,GAASkF,EAAAA,EAAAA,MACX,GAAG,CAAClF,KAGFE,EAAAA,EAAAA,MAAA,WAASG,UAAWC,EAA2BH,SAAA,EACvCC,EAAAA,EAAAA,KAACyB,EAAY,KACd3B,EAAAA,EAAAA,MAAA,OAAKG,UAAWC,EAA2BH,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAAD,SAAK,iBACJC,EAAAA,EAAAA,KAACL,EAAM,IACNoB,IAAcE,GAAQjB,EAAAA,EAAAA,KAAC2D,EAAM,KAAM3D,EAAAA,EAAAA,KAAC+E,EAAY,SAI7D,C","sources":["webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/contacts/Selector.jsx","webpack://react-homework-template/./src/components/ContactsForm/Form.module.css?b4b9","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/components/ContactItem/FormItem.module.css?4944","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactList.module.css?ae34","components/ContactsList/ContactsList.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contacts_input_title\":\"Filter_contacts_input_title__dooW9\"};","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/SliceFilters';\nimport css from './Filter.module.css'\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onFilterChange = e => {\n    dispatch(updateFilter(e.target.value));\n  };\n  return (\n    <div>\n      <p className={css.contacts_input_title} ><b>Find contact by name</b></p>\n      <input\n        type=\"text\"\n        onChange={onFilterChange}\n        placeholder=\"Search by name\"\n      />\n    </div>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilters = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","// extracted by mini-css-extract-plugin\nexport default {\"contacts_container\":\"Form_contacts_container__R+cIh\",\"contacts_title\":\"Form_contacts_title__b4JDn\",\"contacts_input_title\":\"Form_contacts_input_title__l7-J-\",\"input_\":\"Form_input___cE-Tl\",\"submit_button\":\"Form_submit_button__MC22v\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { onHandleAddContact } from 'redux/contacts/Operations';\nimport { selectContacts } from 'redux/contacts/Selector';\nimport Notify from 'notiflix';\nimport css from './Form.module.css'\nexport const ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isRealName = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase()\n  );\n  const isRealNumber = contacts.some(contact => contact.number === number);\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (isRealName) {\n      return Notify.failure(`Contact with name ${name} is present `);\n    } else if (isRealNumber) {\n      return Notify.failure(`Number ${number} is present`);\n    }\n    dispatch(onHandleAddContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const onHandleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        const digits = value.replace(/\\D/g, '');\n        const truncNumber = digits.slice(0, 10);\n        const formatNumber = truncNumber.replace(\n          /(\\d{3})(\\d{3})(\\d{4})/,\n          '$1-$2-$3'\n        );\n        setNumber(formatNumber);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className={css.contacts_container}>\n      <h1 className={css.contacts_title}>Phonebook</h1>\n      <form onSubmit={onHandleSubmit}>\n        <div>\n          <label >\n            <h2 className={css.contacts_input_title}>Name</h2>\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"[A-Za-zА-ЯЁІЇЄҐа-яёіїєґ\\s]+\"\n              title=\"Name may contain only letters, apostrophe, dash, and spaces. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={onHandleChange} />\n          </label>\n        </div>\n        <div >\n          <label>\n            <h2 className={css.contacts_input_title}>Number</h2>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n              title=\"Phone number must be digits and must contain 10 numbers\"\n              required\n              value={number}\n              onChange={onHandleChange}\n            />\n          </label>\n        </div>\n\n        <button type=\"submit\" className={css.submit_button}>Add new contact</button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list_member\":\"FormItem_list_member__JtFmF\",\"list_button\":\"FormItem_list_button__KxqAQ\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { onHandleDeleteContact } from 'redux/contacts/Operations';\nimport css from './FormItem.module.css'\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(onHandleDeleteContact(contact.id));\n  return (\n    <li className={css.list_member}>\n      <div>\n          <p>{contact.name}</p>\n          <p>{contact.number}</p>\n      </div>\n      <button\n        type=\"button\" className={css.list_button} onClick={handleDelete}>Delete Contact</button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact_list\":\"ContactList_contact_list__r8jod\",\"contact_list_container\":\"ContactList_contact_list_container__fbLYm\",\"contact_form_container\":\"ContactList_contact_form_container__nudFc\"};","import { useSelector } from 'react-redux';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { selectFilters } from 'redux/contacts/Selector';\nimport css from './ContactList.module.css'\nconst ContactsList = () => {\n  const filteredContacts = useSelector(selectFilters);\n  return (\n    <ul className={css.contact_list} >\n      {filteredContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact}></ContactItem>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","import { RotatingTriangles } from 'react-loader-spinner';\nexport const Loader = () => {\n  return <div style={styles.container}>\n <RotatingTriangles \n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"rotating-triangels-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"rotating-triangels-wrapper\"\n  flex = \"1\"\n  alignSelf = \"center\"\n/>\n  </div>\n \n};\n\nconst styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n      },\n  };","import { Filter } from 'components/Filter/Filter';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/Selector';\nimport { fetchContacts } from 'redux/contacts/Operations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { Loader } from 'components/Loader/Loader';\nimport css from 'components/ContactsList/ContactList.module.css'\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <section className={css.contact_form_container}>\n            <ContactsForm />\n           <div className={css.contact_list_container}>\n           <h2 >My contacts</h2>\n            <Filter />\n            {isLoading && !error ? <Loader /> : <ContactsList />}\n           </div>\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["Filter","dispatch","useDispatch","_jsxs","children","_jsx","className","css","type","onChange","e","updateFilter","target","value","placeholder","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilters","createSelector","filter","contact","name","toLowerCase","includes","ContactsForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","isRealName","some","isRealNumber","onHandleChange","_e$target","formatNumber","replace","slice","onSubmit","preventDefault","Notify","concat","onHandleAddContact","pattern","title","required","ContactItem","_ref","onClick","onHandleDeleteContact","id","filteredContacts","map","Loader","style","styles","container","RotatingTriangles","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","flex","alignSelf","display","justifyContent","alignItems","top","left","useEffect","fetchContacts","ContactsList"],"sourceRoot":""}